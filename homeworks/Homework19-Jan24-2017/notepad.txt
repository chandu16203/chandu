2)closure:
	==>A closure is an inner function that has access to the outer (enclosing) function's variablesâ€”scope chain. 
		The closure has three scope chains: 
			::it has access to its own scope (variables defined between its curly brackets), 
				it has access to the outer function's variables, 
					and it has access to the global variables.

		What is closure in JS?

				It means if we declare any function with any variable scope/inside another function (in JS we can declare a function inside another function!) then it will count that function scope always. This means that any variable in outer function will be read always. It will not read the global variable (if any) with the same name. This is also one of the objective of using modular design pattern avoiding naming conflict.

3)Hoisting:
	Hoisting is the JavaScript interpreter's action of moving all variable and function declarations to the top of the current scope. However, only the actual declarations are hoisted. Any assignments are left where they are.
			==>All the declarations will be moved to the top.

			var a; //it is the declaration
			a = 29; // it is the assignent means value 29 is assigned to a
			and var a = 29; // it initialisation 

	Ex: var b = 987654;
		==>in the above example var b will be moved to the top, and 